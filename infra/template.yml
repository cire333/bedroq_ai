AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Document Processing Pipeline - Complete with Schematic Processing'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

Globals:
  Function:
    Timeout: 300
    Runtime: python3.9
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DOCUMENT_BUCKET: !Ref DocumentBucket
        PROCESSED_DATA_BUCKET: !Ref ProcessedDataBucket
        DOCUMENT_PROCESSING_TOPIC_ARN: !Ref DocumentProcessingTopic
  Api:
    Cors:
      AllowMethods: "'POST, OPTIONS, GET'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-File-Name,X-File-Size'"
      AllowOrigin: "'*'"
    BinaryMediaTypes:
      - 'application/pdf'
      - 'application/octet-stream'
      - 'multipart/form-data'

Resources:
  # S3 Buckets
  DocumentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-documents-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-processed-${Environment}-${AWS::AccountId}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # SNS Topics
  DocumentProcessingTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-document-processing-${Environment}'
      DisplayName: Document Processing Notifications

  EmbeddingProcessingTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-embedding-processing-${Environment}'
      DisplayName: Embedding Processing Notifications

  # SQS Queues
  SchematicProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-schematic-processing-${Environment}'
      VisibilityTimeoutSeconds: 720  # 12 minutes (longer than Lambda timeout)
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SchematicProcessingDLQ.Arn
        maxReceiveCount: 3

  SchematicProcessingDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-schematic-dlq-${Environment}'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 400  # 30  # Default for DLQ is fine XXX should move this back to 30 I think

  # SNS Subscription: DocumentProcessingTopic -> SchematicProcessingQueue
  SchematicProcessingSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      TopicArn: !Ref DocumentProcessingTopic
      Endpoint: !GetAtt SchematicProcessingQueue.Arn
      FilterPolicy:
        stage: ["stage1"]

  # SQS Queue Policy to allow SNS to send messages
  SchematicProcessingQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SchematicProcessingQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SchematicProcessingQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref DocumentProcessingTopic

  # DynamoDB Table
  ProcessingJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-processing-jobs-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: processing_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: processing_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: status-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # IAM Roles
  UploadHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}/*'
                  - !Sub 'arn:aws:s3:::${ProcessedDataBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}'
                  - !Sub 'arn:aws:s3:::${ProcessedDataBucket}'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ProcessingJobsTable.Arn
                  - !Sub '${ProcessingJobsTable.Arn}/index/*'
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref DocumentProcessingTopic

  SchematicProcessorExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub 'arn:aws:s3:::${ProcessedDataBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${DocumentBucket}'
                  - !Sub 'arn:aws:s3:::${ProcessedDataBucket}'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource:
                  - !GetAtt ProcessingJobsTable.Arn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt SchematicProcessingQueue.Arn
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: 
                  - !Ref EmbeddingProcessingTopic

  # Lambda Functions
  UploadHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-upload-handler-${Environment}'
      Description: Handles document upload requests
      CodeUri: ./lambda-functions/upload-handler/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt UploadHandlerExecutionRole.Arn
      MemorySize: 512
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ProcessingJobsTable
      Events:
        UploadApi:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
        UploadApiOptions:
          Type: Api
          Properties:
            Path: /upload
            Method: OPTIONS
        StatusApi:
          Type: Api
          Properties:
            Path: /status/{processing_id}
            Method: GET

  SchematicProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-schematic-processor-${Environment}'
      Description: Processes KiCad schematic files
      CodeUri: ./lambda-functions/schematic-processor-handler/
      Handler: lambda_function.lambda_handler
      Role: !GetAtt SchematicProcessorExecutionRole.Arn
      MemorySize: 1024
      Timeout: 10  # 300, 5 minutes should be plenty for most schematics, this needs to be fixed it is too low but I am not sure where the default of 30 was coming from in the error messages
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref ProcessingJobsTable
          EMBEDDING_PROCESSING_TOPIC_ARN: !Ref EmbeddingProcessingTopic
      Events:
        SchematicProcessingQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SchematicProcessingQueue.Arn
            BatchSize: 1

  # Test function
  TestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-test-${Environment}'
      Description: Test function to verify setup
      InlineCode: |
        import json
        import boto3
        import os

        def lambda_handler(event, context):
            return {
                'statusCode': 200,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Content-Type': 'application/json'
                },
                'body': json.dumps({
                    'message': 'Schematic processing pipeline is working!',
                    'environment': os.environ.get('ENVIRONMENT'),
                    'document_bucket': os.environ.get('DOCUMENT_BUCKET'),
                    'processed_bucket': os.environ.get('PROCESSED_DATA_BUCKET'),
                    'dynamodb_table': os.environ.get('DYNAMODB_TABLE', 'Not configured'),
                    'pipeline_components': [
                        'upload-handler',
                        'schematic-processor (Stage 1)',
                        'embedding-processor (coming soon)',
                        'sns-topics',
                        'sqs-queues',
                        's3-buckets',
                        'dynamodb-table'
                    ]
                })
            }
      Handler: index.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENT_BUCKET: !Ref DocumentBucket
          PROCESSED_DATA_BUCKET: !Ref ProcessedDataBucket
          DYNAMODB_TABLE: !Ref ProcessingJobsTable
      Events:
        TestApi:
          Type: Api
          Properties:
            Path: /test
            Method: GET

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub '${AWS::StackName}-api-url-${Environment}'

  DocumentBucketName:
    Description: Document S3 bucket name
    Value: !Ref DocumentBucket
    Export:
      Name: !Sub '${AWS::StackName}-document-bucket-${Environment}'

  ProcessedDataBucketName:
    Description: Processed data S3 bucket name  
    Value: !Ref ProcessedDataBucket
    Export:
      Name: !Sub '${AWS::StackName}-processed-data-bucket-${Environment}'

  DocumentProcessingTopicArn:
    Description: SNS Topic ARN for document processing
    Value: !Ref DocumentProcessingTopic
    Export:
      Name: !Sub '${AWS::StackName}-topic-arn-${Environment}'

  EmbeddingProcessingTopicArn:
    Description: SNS Topic ARN for embedding processing
    Value: !Ref EmbeddingProcessingTopic
    Export:
      Name: !Sub '${AWS::StackName}-embedding-topic-arn-${Environment}'

  ProcessingJobsTableName:
    Description: DynamoDB table for processing jobs
    Value: !Ref ProcessingJobsTable
    Export:
      Name: !Sub '${AWS::StackName}-table-name-${Environment}'

  SchematicProcessingQueueUrl:
    Description: SQS Queue URL for schematic processing
    Value: !Ref SchematicProcessingQueue
    Export:
      Name: !Sub '${AWS::StackName}-queue-url-${Environment}'

  UploadHandlerFunctionArn:
    Description: Upload Handler Lambda Function ARN
    Value: !GetAtt UploadHandlerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-upload-handler-arn-${Environment}'

  SchematicProcessorFunctionArn:
    Description: Schematic Processor Lambda Function ARN
    Value: !GetAtt SchematicProcessorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-schematic-processor-arn-${Environment}'
